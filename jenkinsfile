pipeline {
    agent { label 'test-server1' }  // Run on Jenkins slave node

    environment {
        TEST_SERVER_IP = "172.20.20.101"
        REPO_URL = "git@github.com:Raedido/projCert.git"
        DOCKER_IMAGE_NAME = "php-app"
        CONTAINER_NAME = "php-app-container"
    }

    stages {

        stage('Job 1: Install Puppet Agent on Test Server') {
            steps {
                script {
                    sh '''
                    ssh -o StrictHostKeyChecking=no vagrant@${TEST_SERVER_IP} "sudo apt update && sudo apt install -y puppet-agent"
                    ssh -o StrictHostKeyChecking=no vagrant@${TEST_SERVER_IP} "sudo systemctl start puppet && sudo systemctl enable puppet"
                    '''
                }
            }
        }

        stage('Job 2: Configure Docker using Ansible') {
            steps {
                script {
                    // Create Ansible Inventory
                    writeFile file: 'inventory', text: """
                    [test_servers]
                    test_server1 ansible_host=${TEST_SERVER_IP} ansible_user=vagrant ansible_ssh_private_key_file=~/.vagrant.d/insecure_private_key
                    """

                    // Create Ansible Playbook
                    writeFile file: 'install_docker.yml', text: '''
                    ---
                    - name: Install Docker on Test Server
                      hosts: test_servers
                      become: yes
                      tasks:
                        - name: Install prerequisites
                          apt:
                            name:
                              - apt-transport-https
                              - ca-certificates
                              - curl
                              - software-properties-common
                            state: present
                            update_cache: yes

                        - name: Add Docker GPG Key
                          shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

                        - name: Add Docker Repository
                          shell: echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

                        - name: Update apt cache
                          apt:
                            update_cache: yes

                        - name: Install Docker
                          apt:
                            name: docker-ce
                            state: present

                        - name: Start Docker Service
                          service:
                            name: docker
                            state: started
                            enabled: yes
                    '''

                    // Run Ansible Playbook
                    sh '''
                    ansible-playbook -i inventory install_docker.yml
                    '''
                }
            }
        }

        stage('Job 3: Pull Code, Build, and Deploy Docker Container') {
            steps {
                script {
                    sh '''
                    ssh -o StrictHostKeyChecking=no vagrant@${TEST_SERVER_IP} "[ -d ~/php-app ] || git clone ${REPO_URL} ~/php-app"
                    ssh -o StrictHostKeyChecking=no vagrant@${TEST_SERVER_IP} "cd ~/php-app && git pull"
                    ssh -o StrictHostKeyChecking=no vagrant@${TEST_SERVER_IP} "cd ~/php-app && docker build -t ${DOCKER_IMAGE_NAME} ."
                    ssh -o StrictHostKeyChecking=no vagrant@${TEST_SERVER_IP} "docker stop ${CONTAINER_NAME} || true"
                    ssh -o StrictHostKeyChecking=no vagrant@${TEST_SERVER_IP} "docker rm ${CONTAINER_NAME} || true"
                    ssh -o StrictHostKeyChecking=no vagrant@${TEST_SERVER_IP} "docker run -d --name ${CONTAINER_NAME} -p 8080:80 ${DOCKER_IMAGE_NAME}"
                    '''
                }
            }
        }

        stage('Job 4: Cleanup on Failure') {
            when {
                expression { currentBuild.result == 'FAILURE' }
            }
            steps {
                script {
                    sh '''
                    ssh -o StrictHostKeyChecking=no vagrant@${TEST_SERVER_IP} "docker stop ${CONTAINER_NAME} || true"
                    ssh -o StrictHostKeyChecking=no vagrant@${TEST_SERVER_IP} "docker rm ${CONTAINER_NAME} || true"
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "Deployment completed successfully!"
        }
        failure {
            echo "Pipeline failed! Container removed from Test Server."
        }
    }
}
